mutate(cran3, size_mb = size / 2^20)
mutate(cran3, size_mb = size / 2^20,size_gb=size_mb / 2^10)
mutate(cran3, correct_size=size+1000)
summarize(cran, avg_bytes=mean(size))
library(dplyr)
cran<-tbl_df(mydf)
rm("mydf")
cran
?group_by
by_package<-group_by(cran,package)
by_package
summarize(by_package,mean(size))
submit()
submit()
pack_sum
quantile(pack_sum$count,probs=0.99)
top_counts<-filter(pack_sum,count>679)
top_counts
View(top_counts)
top_counts_sorted<-arrange(top_counts,count)
top_counts_sorted<-arrange(top_counts,desc(count))
View(top_counts_sorted)
quantile(pack_sum$unique, probs = 0.99)
top_unique<-filter(pack_sum,unique>465)
View(top_unique)
top_unique_sorted<-arrange(top_unique,desc(unique))
View(top_unique_sorted)
submit()
submit
submit()
submit()
View(result3)
submit()
submit()
submit()
submit()
swirk()
swirl()
data1<-read.csv("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv")
str(data1)
data1$VAL
data1[data1$VAL==24,]
data1[data1$VAL==24]
data1[,data1$VAL==24]
omit.na(data1[data1$VAL==24,])
na.omit(data1[data1$VAL==24,])
data1[data1$VAL==24,]
data1[(!is.na(data1$VAL==24)),]
data1$VAL==24
!is.na(data1$VAL==24)
data2<-data1[!is.na(data1$VAL==24),]
data2
nrow(data2)
head(data2)
str(data2)
tab<-tbl_df(data1)
library(dplyr)
tab<-tbl_df(data1)
View(tab)
x<-filter(tab,VAL==24)
View(X)
View(x)
summarize(x,n())
library(xlsx)
install.packages("xlsx")
library(xlsx)
dataq3<-read.xlsx("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FDATA.gov_NGAP.xlsx",header=TRUE)
dataq3<-read.xlsx("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FDATA.gov_NGAP.xlsx",18:23,header=TRUE)
fileurl<-"https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FDATA.gov_NGAP.xlsx"
download.file(fileUrl, destfile = paste0(getwd(), '/getdata%2Fdata%2FDATA.gov_NGAP.xlsx'), method = "curl")
download.file(fileurl, destfile = paste0(getwd(), '/getdata%2Fdata%2FDATA.gov_NGAP.xlsx'), method = "curl")
dat<-read.xlsx(file = "getdata%2Fdata%2FDATA.gov_NGAP.xlsx", sheetIndex = 1, rowIndex = 18:23, colIndex = 7:15)
View(dat)
dat<-xlsx::read.xlsx(file = "getdata%2Fdata%2FDATA.gov_NGAP.xlsx", sheetIndex = 1, rowIndex = 18:23, colIndex = 7:15)
View(dat)
sum(dat$Zip*dat$Ext,na.rm=T)
install.packages("XML")
library(XML)
xmlurl<-"https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Frestaurants.xml"
xmldoc<-xmlParse(xmlurl)
rootnode<-xmlRoot(xmldoc)
download.file(fileUrl, destfile = paste0(getwd(), '/getdata%2Fdata%2FDATA.gov_NGAP.xlsx'), method = "curl")
download.file(xmlurl, destfile = paste0(getwd(), '/getdata%2Fdata%2FDATA.gov_NGAP.xlsx'), method = "curl")
doc <- xmlTreeParse(sub("s", "", xmlurl), useInternal = TRUE)
rootnode<-xmlRoot(doc)
zipcodes<-xpathSApply(rootnode,"//zipcode",xmlValue)
xmlzipcodesdt<-data.table(zipcode=zipcodes)
xmlzipcodesdt<-data.table::data.table(zipcode=zipcodes)
library(dplyr)
xmlzipcodesdt<-data.table(zipcode=zipcodes)
?data.table
library(data.table)
install.packages("data.table")
library(data.table)
xmlzipcodesdt<-data.table(zipcode=zipcodes)
xmlzipcodesdt[xmlzipcodesdt$zipcode=="21231",.N]
csvurl<-"https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06pid.csv"
fam<-read.csv(csvurl)
library(data.table)
fam<-fread("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06pid.csv")
getwd()
View(fam)
fam$pwgtp15
DT<-fam
install.packages("RMySQL")
source("http://bioconductor.org/biocLite.R")
install.packages("BiocManager")
library(BiocManager)
biocLite("rhdf5")
BiocManager::install("biocLite")
library(BiocManager)
BiocManager::install("biocLite")
BiocManager::install("rhdf5")
library(rhdf5)
created=h5createFile("example.h5")
created
created=h5createGroup("example.h5","foo")
created=h5createGroup("example.h5","bar")
created=h5createGroup("example.h5","foo/foobar")
h5ls("example.h5")
install.packages("HTTR")
install.packages("httr")
oauth_endpoints("github")
library(httr)
oauth_endpoints("github")
myapp <- oauth_app("github",
key = "6afff30bb6d0058d2bf9",
secret = "13050bc2d1166dc5b706799ba97041bfaa098e3d"
)
myapp <- oauth_app("github",key = "6afff30bb6d0058d2bf9",secret = "13050bc2d1166dc5b706799ba97041bfaa098e3d")
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
gtoken <- config(token = github_token)
req <- GET("https://api.github.com/rate_limit", gtoken)
stop_for_status(req)
myapp <- oauth_app("github",key = "6afff30bb6d0058d2bf9",secret = "13050bc2d1166dc5b706799ba97041bfaa08e3d")
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
myapp <- oauth_app("github",key = "6afff30bb6d0058d2bf9",secret = "13050bc2d1166dc5b706799ba97041bfaa08e3d")
myapp <- oauth_app("github",key = "6afff30bb6d0058d2bf9",secret = "13050bc2d1166dc5b706799ba97041bfaa08e3d")
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
myapp <- oauth_app("github",key = "6afff30bb6d0058d2bf9",secret = "13050bc2d1166dc5b706799ba97041bfaa08e3d")
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
gtoken <- config(token = github_token)
req <- GET("https://api.github.com/rate_limit", gtoken)
stop_for_status(req)
library(help = "base")
myapp <- oauth_app("FirstApp",key = "6afff30bb6d0058d2bf9",secret = "13050bc2d1166dc5b706799ba97041bfaa08e3d")
github_token <- oauth2.0_token(oauth_endpoints("FirstApp"), myapp)
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
library(httr)
# 1. Find OAuth settings for github:
#    http://developer.github.com/v3/oauth/
oauth_endpoints("github")
# 2. To make your own application, register at
#    https://github.com/settings/developers. Use any URL for the homepage URL
#    (http://github.com is fine) and  http://localhost:1410 as the callback url
#
#    Replace your key and secret below.
myapp <- oauth_app("FirstApp",
key = "6afff30bb6d0058d2bf9",
secret = "255efb0ba6655f9a87f552262205e915ed2ad880"
)
# 3. Get OAuth credentials
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
# 4. Use API
gtoken <- config(token = github_token)
req <- GET("https://api.github.com/rate_limit", gtoken)
stop_for_status(req)
content(req)
# OR:
req <- with_config(gtoken, GET("https://api.github.com/rate_limit"))
stop_for_status(req)
content(req)
library(httr)
# 1. Find OAuth settings for github:
#    http://developer.github.com/v3/oauth/
oauth_endpoints("github")
# 2. To make your own application, register at
#    https://github.com/settings/developers. Use any URL for the homepage URL
#    (http://github.com is fine) and  http://localhost:1410 as the callback url
#
#    Replace your key and secret below.
myapp <- oauth_app("FirstApp",
key = "6afff30bb6d0058d2bf9",
secret = "255efb0ba6655f9a87f552262205e915ed2ad880",redirect_uri = "http://localhost:1410"
)
# 3. Get OAuth credentials
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
# 4. Use API
gtoken <- config(token = github_token)
req <- GET("https://api.github.com/rate_limit", gtoken)
stop_for_status(req)
content(req)
# OR:
req <- with_config(gtoken, GET("https://api.github.com/rate_limit"))
stop_for_status(req)
content(req)
install.packages("jsonlite")
install.packages("jsonlite")
install.packages("httpuv")
library(jsonlite)
library(httpuv)
library(httr)
oauth_endpoints("github")
myapp <- oauth_app("FirstApp",key = "6afff30bb6d0058d2bf9",secret = "255efb0ba6655f9a87f552262205e915ed2ad880")
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
gtoken <- config(token = github_token)
req <- GET("https://api.github.com/users/jtleek/repos", gtoken)
stop_for_status(req)
myapp <- oauth_app("FirstApp",key = "6afff30bb6d0058d2bf9",secret = "255efb0ba6655f9a87f552262205e915ed2ad880")
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
gtoken <- config(token = github_token)
req <- GET("https://api.github.com/users/jtleek/repos", gtoken)
stop_for_status(req)
library(httr)
# 1. Find OAuth settings for github:
#    http://developer.github.com/v3/oauth/
oauth_endpoints("github")
# 2. To make your own application, register at
#    https://github.com/settings/developers. Use any URL for the homepage URL
#    (http://github.com is fine) and  http://localhost:1410 as the callback url
#
#    Replace your key and secret below.
myapp <- oauth_app("FirstApp",
key = "6afff30bb6d0058d2bf9",
secret = "255efb0ba6655f9a87f552262205e915ed2ad880"
)
# 3. Get OAuth credentials
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
# OR:
req <- with_config(gtoken, GET("https://api.github.com/users/jtleek/repos"))
stop_for_status(req)
content(req)
library(httr)
# 1. Find OAuth settings for github:
#    http://developer.github.com/v3/oauth/
oauth_endpoints("github")
# 2. To make your own application, register at
#    https://github.com/settings/developers. Use any URL for the homepage URL
#    (http://github.com is fine) and  http://localhost:1410 as the callback url
#
#    Replace your key and secret below.
myapp <- oauth_app("FirstApp",
key = "6afff30bb6d0058d2bf9",
secret = "255efb0ba6655f9a87f552262205e915ed2ad880"
)
# 3. Get OAuth credentials
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp,cache=FALSE)
# OR:
req <- with_config(gtoken, GET("https://api.github.com/users/jtleek/repos"))
stop_for_status(req)
content(req)
req <- with_config(gtoken, GET("https://api.github.com/users/jtleek/repos"))
stop_for_status(req)
req <- with_config(gtoken, GET("https://api.github.com/users/jtleek/repos"))
stop_for_status(req)
library(httr)
# 1. Find OAuth settings for github:
#    http://developer.github.com/v3/oauth/
oauth_endpoints("github")
# 2. To make your own application, register at
#    https://github.com/settings/developers. Use any URL for the homepage URL
#    (http://github.com is fine) and  http://localhost:1410 as the callback url
#
#    Replace your key and secret below.
myapp <- oauth_app("FirstApp",
key = "6afff30bb6d0058d2bf9",
secret = "255efb0ba6655f9a87f552262205e915ed2ad880"
)
# 3. Get OAuth credentials
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp,cache=FALSE)
req <- with_config(gtoken, GET("https://api.github.com/rate_limit"))
stop_for_status(req)
req <- with_config(github_token, GET("https://api.github.com/rate_limit"))
library(httr)
# 1. Find OAuth settings for github:
#    http://developer.github.com/v3/oauth/
oauth_endpoints("github")
# 2. To make your own application, register at
#    https://github.com/settings/developers. Use any URL for the homepage URL
#    (http://github.com is fine) and  http://localhost:1410 as the callback url
#
#    Replace your key and secret below.
myapp <- oauth_app("FirstApp",
key = "6afff30bb6d0058d2bf9",
secret = "255efb0ba6655f9a87f552262205e915ed2ad880"
)
# 3. Get OAuth credentials
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp,cache=FALSE)
gtoken <- config(token = github_token)
req <- with_config(gtoken, GET("https://api.github.com/users/jtleek/repos"))
stop_for_status(req)
output<-content(req)
gitDF = jsonlite::fromJSON(jsonlite::toJSON(output))
gitDF[gitDF$full_name == "jtleek/datasharing", "created_at"]
library("sqldf")
install.packages("sqldf")
library("sqldf")
url <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06pid.csv"
f <- file.path(getwd(), "ss06pid.csv")
download.file(url, f)
acs <- data.table::data.table(read.csv(f))
View(acs)
connection <- url("http://biostat.jhsph.edu/~jleek/contact.html")
htmlCode <- readLines(connection)
close(connection)
c(nchar(htmlCode[10]), nchar(htmlCode[20]), nchar(htmlCode[30]), nchar(htmlCode[100]))
fileUrl <- "https://d396qusza40orc.cloudfront.net/getdata%2Fwksst8110.for"
SST <- read.fwf(fileUrl, skip=4, widths=c(12, 7, 4, 9, 4, 9, 4, 9, 4))
head(SST)
sum(SST[,4])
fileUrl <- "https://d396qusza40orc.cloudfront.net/getdata%2Fwksst8110.for"
SST <- read.fwf(fileUrl, skip=4, widths=c(12, 7, 7, 9, 4, 9, 4, 9, 4))
head(SST)
library(swirl)
rm(list=ls())
swirl()
swirl()
library(dplyr)
library(tidyr)
students
?gather
gather(students,"sex","count",-grade)
gather(students,sex,count,-grade)
students2
res<-gather(students2,sex_class,value,-grade)
res<-gather(students2,sex_class,count,-grade)
res
?separate
separate(data=res,col=sex_class,into=c("sex","class"))
submit()
students3
submit()
submit()
?spread
submit()
submit()
submit()
submit()
submit()
submit()
library(readr)
parse_number("class5")
submit()
?mutate
submit()
students4
submit()
submit()
submit()
passes
head(passed)
passed
failed
passed=mutate(passed,status="passed")
passed<-mutate(passed,status="passed")
failed<-mutate(passed,status="failed")
failed<-mutate(failed,status="failed")
?bind_rows
bind_rows(passed,fail,status)
bind_rows(passed,failed,status)
bind_rows(passed,failed)
sat
?separate
submit()
submit()
mydf <- read.csv(path2csv,stringsAsFactors=FALSE)
dim(mydf)
head(mydf)
library(dplyr)
packageVersion(“dplyr”)
packageVersion("dplyr")
cran <- tbl_df(mydf)
rm(“mydf”)
rm("mydf")
cran
?select
select(cran,ip_id,package,country)
5:20
select(cran,r_arch:country)
select(cran,country:r_arch)
cran
select(cran,-time)
-5:20
-(5:20)
select(cran,-(X:size))
filter(cran,package == “swirl”)
filter(cran, package == "swirl")
filter(cran,r_version == “3.1.1”,country==”US”)
filter(cran,r_version == "3.1.1", country == "US")
?Comparison
filter(cran,country==“IN”,r_version==“3.0.2”)
filter(cran,country==“IN”,r_version==“3.0.2”)
filter(cran,country=="IN",r_version=="3.0.2")
filter(cran, r_version <= "3.0.2", country == "IN")
filter(cran, country == "US" | country == "IN")
filter(cran,size>100500,r_os == “linux-gnu”)
filter(cran,size>100500,r_os == "linux-gnu")
is.na(c(3, 5, NA, 10))
!is.na(c(3, 5, NA, 10))
filter(cran, !is.na(r_version))
select(cran, size:ip_id)
select(cran, size:ip_id)
cran2<-select(cran, size:ip_id)
arrange(cran2, ip_id)
arrange(cran2,desc(ip_id)
+
>
arrange(cran2,desc(ip_id))
arrange(cran2,package,ip_id)
arrange(cran2,country,desc(r_version),ip_id)
select(cran,ip_id,package,size)
cran3 <- select(cran, ip_id, package, size)
cran3
mutate(cran3, size_mb = size / 2^20)
mutate(cran3,size_gb=size/2^10)
mutate(cran3, size_mb = size / 2^20, size_gb = size_mb / 2^10)
mutate(cran3,correct_size=size+1000)
summarize(cran,avg_bytes=mean(size))
library(dplyr)
cran <- tbl_df(mydf)
rm("mydf")
cran
?group_by
by_package <- group_by(cran)
by_package <- group_by(cran,package)
by_package
summarize(by_package)
summarize(by_package,mean(size))
submit()
pack_sum
quantile(pack_sum$count, probs = 0.99)
quantile(pack_sum$count,probs = .01)
top_counts <- filter(pack_sum,count>679)
top_counts
View(top_counts)
top_counts_sorted <- arrange(top_counts,desc(count))
View(top_counts_sorted)
quantile(pack_sum$unique,probs=.99)
top_unique <- filter(pack_sum,unique>465)
View(top_unique)
top_unique_sorted <- arrange(top_unique,desc(unique))
View(top_unique_sorted)
submit()
submit()
submit()
View(result3)
submit()
submit()
submit()
submit()
submit()
library(dplyr)
url="https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv"
file<-download.file(url)
download.file(url,paste(getwd(),"/data.csv"))
download.file(url,destfile=paste(getwd(),"/data.csv"))
download.file(url,destfile="/data.csv"))
download.file(url,destfile="/data.csv")
download.file(url,destfile="data.csv")
x<-download.file(url,destfile="data.csv")
df<-read.csv("data.csv")
names(df)
tb<-tbl_df(df)
filter(tb,tb$ACR==3,tb$AGS==6)
agricultureLogical<-filter(tb,tb$ACR==3,tb$AGS==6)
agricultureLogical<-tb$ACR==3 && tb$AGS==6
which(agricultureLogical)
agricultureLogical<-df$ACR==3 && df$AGS==6
which(agricultureLogical)
agricultureLogical<-as.logical(df[df$ACR==3 && df$AGS==6,]
which(agricultureLogical)
agricultureLogical<-as.logical(df[df$ACR==3 && df$AGS==6,])
which(agricultureLogical)
agricultureLogical<-df$ACR==3 && df$AGS==6
agricultureLogical
df
df$ACR==3
df$ACR==3 && df$AGS==6
filter(tb,tb$ACR==3,tb$AGS==6)
agricultureLogical<-df$ACR==3 & df$AGS==6
which(agricultureLogical)
library(jpeg)
install.packages("jpeg")
library(jpeg)
Q2Url <- "https://d396qusza40orc.cloudfront.net/getdata%2Fjeff.jpg"
Q2path<-paste(getwd(),"/Q2.jpg")
download.file(Q2Url, Q2Path, mode = 'wb')
download.file(Q2Url, Q2path, mode = 'wb')
download.file(Q2Url,"Q2.jpg", mode = 'wb')
Q2 <- readJPEG(Q2Path, native = TRUE)
Q2 <- readJPEG("Q2.jpg", native = TRUE)
quantile(Q2, probs = c(0.3, 0.8))
setwd("~/Desktop/IBM Food Security")
setwd("~/Desktop/IBM Food Security/Churn Analysis/Preprocessed Data")
list.files()
global<-read.csv("Global_Mobility_Report.csv")
library(dplyr)
View(global)
selectedus<-global %>% filter(country_region_code=='US')
View(selectedus)
selectedcounty<-selectedus %>% filter(sub_region_2!="")
View(selectedcounty)
selecttype<-selectedcounty %>% select(country_region_code:sub_region_2,date,grocery_and_pharmacy_percent_change_from_baseline)
View(selecttype)
removecols<-selecttype %>% select(-(country_region_code:country_region))
View(removecols)
filter(removecols,sub_region_1=='Alabama')
library(tidyr)
x<-removecols %>% spread(key=date,value=grocery_and_pharmacy_percent_change_from_baseline)
View(x)
write.csv(x,"USmobility.csv")
